//A Java program for Bellman-Ford's single source shortest
//path algorithm.
//testtt
import java.io.*;
import java.lang.*;
import java.util.*;

import javax.swing.*;

//A class to represent a connected, directed and weighted
//graph
class graph {

	// A class to represent a weighted edge in graph
	class Edge {
		int src, dest, weight;

		Edge() {
			src = dest = weight = 0;
		}
	};

	int V, E;
	Edge edge[];

	// Creates a graph with V vertices and E edges
	graph(int v, int e) {
		V = v;
		E = e;
		edge = new Edge[e];
		for (int i = 0; i < e; ++i)
			edge[i] = new Edge();
	}

	// The main function that finds shortest distances from
	// src to all other vertices using Bellman-Ford
	// algorithm. The function also detects negative weight
	// cycle
	void BellmanFord(graph graph, int src, int location) {
		int V = graph.V, E = graph.E;
		int dist[] = new int[V];

		// Step 1: Initialize distances from src to all
		// other vertices as INFINITE
		for (int i = 0; i < V; ++i)
			dist[i] = Integer.MAX_VALUE;
		dist[src] = 0;

		// Step 2: Relax all edges |V| - 1 times. A simple
		// shortest path from src to any other vertex can
		// have at-most |V| - 1 edges
		for (int i = 1; i < V; ++i) {

			for (int j = 0; j < E; ++j) {
				int u = graph.edge[j].src;
				int v = graph.edge[j].dest;
				int weight = graph.edge[j].weight;
				if (dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v])
					dist[v] = dist[u] + weight;
			}
		}

		// Step 3: check for negative-weight cycles. The
		// above step guarantees shortest distances if graph
		// doesn't contain negative weight cycle. If we get
		// a shorter path, then there is a cycle.

		for (int j = 0; j < E; ++j) {
			int u = graph.edge[j].src;
			int v = graph.edge[j].dest;
			int weight = graph.edge[j].weight;
			if (dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v]) {
				System.out.println("Graph contains negative weight cycle");
				return;
			}
		}

		printArr(dist, V, location);
	}

	// A utility function used to print the solution
	void printArr(int dist[], int V , int s) {
		// JOptionPane.showMessageDialog (null, "Vertex Distance from Source"
		System.out.println("Vertex        Distance from Source");
		for (int i = 0; i < V; ++i)
			System.out.println(i + "\t\t\t" + dist[i]);
		
		ArrayList<String> locationName = new ArrayList<String>();
		locationName.add("Electric Tower");
		locationName.add("Walkway");
		locationName.add("Lab");
		locationName.add("Main Faculty");
		locationName.add("Photo View FSKTM");
		locationName.add("FSKTM Cubicle");
		locationName.add("Parking DKAP");
		locationName.add("DKAP B");
		locationName.add("DKAP A");
		locationName.add("Parking Faculty(Assembly point)");
		
		
		  JOptionPane.showMessageDialog(null,
		  "The shortest path from " + locationName.get(s) + String.format(" with distance of%3d" ,dist[s]) +
		  String.format(" to the Assembly point ",9) 
		  
		  //String.format("\nPath       %3d",paths[10]) ,
		  ,"Evacuation Path", JOptionPane.INFORMATION_MESSAGE);
		 
		/*
		 * JOptionPane.showMessageDialog(null,printArr(dist,V) , "Solution",
		 * JOptionPane.INFORMATION_MESSAGE);
		 */

	}

	// Driver's code
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int V = 10; // Number of vertices in graph
		int E = 16; // Number of edges in graph

		graph graph = new graph(V, E);

		// add edge 1-0 (or B-A in above figure)
				graph.edge[0].src = 1;
				graph.edge[0].dest = 0;
				graph.edge[0].weight = 5;

				// add edge 2-0 (or C-A in above figure)
				graph.edge[1].src = 2;
				graph.edge[1].dest = 0;
				graph.edge[1].weight = 3;

				// add edge 2-1 (or C-B in above figure)
				graph.edge[2].src = 2;
				graph.edge[2].dest = 1;
				graph.edge[2].weight = 2;

				// add edge 3-0 (or D-A in above figure)
				graph.edge[3].src = 3;
				graph.edge[3].dest = 0;
				graph.edge[3].weight = 1;

				// add edge 5-0 (or F-A in above figure)
				graph.edge[4].src = 5;
				graph.edge[4].dest = 0;
				graph.edge[4].weight = 2;

				// add edge 5-3 (or F-D in above figure)
				graph.edge[5].src = 5;
				graph.edge[5].dest = 3;
				graph.edge[5].weight = 1;

				// add edge 4-5 (or E-F in above figure)
				graph.edge[6].src = 4;
				graph.edge[6].dest = 5;
				graph.edge[6].weight = 6;

				// add edge 6-4 (or G-E in above figure)
				graph.edge[7].src = 6;
				graph.edge[7].dest = 4;
				graph.edge[7].weight = 7;
				
				// add edge 7-6 (or H-G in above figure)
				graph.edge[8].src = 7;
				graph.edge[8].dest = 6;
				graph.edge[8].weight = 1;
				
				// add edge 7-8 (or H-I in above figure)
				graph.edge[9].src = 7;
				graph.edge[9].dest = 8;
				graph.edge[9].weight = 2;
				
				// add edge 8-7 (or I-H in above figure)
				graph.edge[10].src = 8;
				graph.edge[10].dest = 7;
				graph.edge[10].weight = 2;
				
				// add edge 9-7 (or J-H in above figure)
				graph.edge[10].src = 9;
				graph.edge[10].dest = 7;
				graph.edge[10].weight = 7;
				
				// add edge 9-6 (or J-G in above figure)
				graph.edge[11].src = 9;
				graph.edge[11].dest = 6;
				graph.edge[11].weight = 4;
				
				// add edge 9-5 (or J-F in above figure)
				graph.edge[12].src = 9;
				graph.edge[12].dest = 5;
				graph.edge[12].weight = 6;
				
				// add edge 9-3 (or J-D in above figure)
				graph.edge[13].src = 9;
				graph.edge[13].dest = 3;
				graph.edge[13].weight = 7;
				
				// add edge 9-2 (or J-C in above figure)
				graph.edge[14].src = 9;
				graph.edge[14].dest = 2;
				graph.edge[14].weight = 9;

		

		String Place = JOptionPane.showInputDialog(null,
				"0 - Electric Tower\n1 - Walkway\n2 - Lab\n3 - Main Faculty\n4 - Photo View FSKTM\n5 - FSKTM Cubicle" + 
				"\n6- Parking DKAP\n7 - DKAP B\n8 - DKAP A\n9 - Parking Faculty(Assembly point)\n\n" + "Enter your location",
				"Evacuation Path ", JOptionPane.INFORMATION_MESSAGE);
		int location = Integer.parseInt(Place);
		
		// Function call
		graph.BellmanFord(graph, 9, location);
	}
}
